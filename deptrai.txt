
10:42 AM 10/16/2023
// bài toán cái túi 


#include <bits/stdc++.h>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, S; cin>> n >> S;
    int w[n + 1], v[n + 1];
    for(int i = 1; i <= n; i++) cin >> w[i];
    for(int i = 1; i <= n; i++) cin >> v[i];
    int dp[n+ 1][S + 1]; memset(dp, 0, sizeof(dp));
    for(int i = 1; i <= n; i++){
        for (int j = 1; j <= S; j++){
            //Khong lua chon do vat thu i vào trong tại
            dp[i][j] = dp[i - 1][j];
            //Co the dua do vat thu i vào trong tui
            if(j >= w[i]){
                dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i]] + v[i]);
            }
        }
    }

    cout << dp[n][S] << endl;
    return 0;
}


// phân hạng ngọc trai 

#include<bits/stdc++.h>
#define N 10001
#define ll long long
using namespace std;
const ll h=1e8+7;
const ll hh=h*h;
const ll p=17;
int kt[h],dp[N];
ll hb[N],pm[N]; bool d[27];
string b; int m,n;

void inp(){
	cin>>m>>b; 
	b='#'+b;
}
ll geth(int u,int v){
	return ((hb[v]-hb[u-1]*pm[v-u+1]+hh)%h);
}
bool check_1(){
	for(int i=1; i<=m; i++)
		if(!d[b[i]-'A']) d[b[i]-'A']=true;
		else return false;
	return true;
}
bool check(int k){
	n=0;
	for(int i=k; i<=m; i++){
		int la=geth(i-k+1,i);
		kt[la]++;
		dp[++n]=la;
		if(kt[la]>1) return false;
	}
	return true;
}

void solve(){
	pm[0]=1;
	for(int i=1; i<=m; i++) pm[i]=(pm[i-1]*p)%h;
	hb[0]=1;
	for(int i=1; i<=m; i++) hb[i]=(hb[i-1]*p+(b[i]-'A'+1))%h;
	if(check_1()){
		cout<<1;
		return;
	}
	for(int i=2; i<=m; i++){
		if(check(i)){
			cout<<i;
			break;
		}
		for(int j=1; j<=n; j++)	kt[dp[j]]=0;
	}
}
int main(){
	ios_base::sync_with_stdio(NULL);
	cin.tie(NULL); cout.tie(NULL);
	freopen("phnt.inp","r",stdin);
	freopen("phnt.out","w",stdout);
	inp();
	solve();
}

// bài khóa 

#include<bits/stdc++.h>
#define N 5001
using namespace std;
vector<int> a[N];
bool kt[N],d[N][N];
int n,res=0;

void inp(){
	scanf("%d",&n);
	for(int i=1; i<=n; i++){
		int x;
		scanf("%d",&x);
		a[x].push_back(i);
		a[i].push_back(x);
		d[x][i]=d[i][x]=true;
	}
}
void dfs(int u){
	kt[u]=true;
	int s=a[u].size();
	for(int v=0; v<s; v++)
		if(!kt[a[u][v]] && d[u][a[u][v]]) dfs(a[u][v]);
}
void solve(){
	for(int i=1; i<=n; i++)
		if(!kt[i]){
			res++; dfs(i);
		}
	printf("%d",res);
}
int main(){
	freopen("khoa.inp","r",stdin);
	freopen("khoa.out","w",stdout);
	inp();
	solve();
	return 0;
}

// Số Lớn
// {
string cong(string x,string y){
	int sx=x.length();
	int sy=y.length();
	int l=abs(sx-sy);
	if(sx<sy)
		for(int i=1; i<=l; i++) x='0'+x;
	else
		for(int i=1; i<=l; i++) y='0'+y;
	l=x.length(); int res=0;
	string z;
    for(int i=l-1; i>=0; i--){
       int r=x[i]+y[i]-96+res;
       res=r/10;
       z=char(r%10+48)+z;
    }
    if(res>0) z=char(res+48)+z;	
    return z;
}
string tru(string x,string y){
    int sx=x.length();
    int sy=y.length();
	int l=abs(sx-sy);
	string z;
	if(sx<sy) for(int i=1; i<=l; i++) x='0'+x;
	else for(int i=1; i<=l; i++) y='0'+y;
    string am="";
	if(x<y){
		am="-";
		swap(x,y);
	}
    int nho=0;
    l=x.length();
    for(int i=l-1; i>=0; i--){
     	int r=x[i]-y[i]-nho;
     	if(r<0){
     		r+=10;
			nho=1;	
		}else nho=0;
        z=char(r+48)+z;
    }
    int i=0;
    while(z[i]=='0') i++;
    z.erase(0,i);
        z=am+z;
    return z;
}
string nhan(string s,int x){
    int l=s.length(),nho=0;
    string res="";
    for(int i=l-1; i>=0; i--){
    	int so=(s[i]-'0')*x+nho;
    	nho=so/10;
    	res=char(so%10+'0')+res;
	}
	if(nho>0) res=char(nho+'0')+res;
	return res;
}
//}


// Đổi số sang xâu
string ssx(unsigned int n)// ham doi so sang xau
{
    stringstream ss;
    ss<<n;
    return ss.str();
}


//tổng ước 

int tong_uoc(int x){
	if(x<1) return 0;
	else if (x==1) return 1;
	int res=1+x;
	int y=sqrt(x);
	for(int i=2; i<=y; i++)
		if(x%i==0) res+=i+x/i;
	if(y*y==x) res-=y;
	return res;
}

// đếm số ước O(n^1/3) *chắc thế*

// Phép nhân Ấn Độ (a * b) % mod. Sử dụng để tránh tràn số khi thực hiện phép nhân.
long long indian_multiplication(long long a, long long b, long long mod)
{
    if (b == 0)
        return 0LL;

    long long half = indian_multiplication(a, b / 2LL, mod) % mod;

    if (b & 1)
        return (half + half + a) % mod;
    else
        return (half + half) % mod;
}

// Tính (a^b) % mod. Sử dụng kết hợp với phép nhân Ấn Độ để tránh tràn số khi thực hiện phép nhân.
long long modular_exponentiation(long long a, long long b, long long mod)
{
    if (b == 0)
        return 1LL;

    long long half = modular_exponentiation(a, b / 2LL, mod) % mod;
    long long product = indian_multiplication(half, half, mod);

    if (b & 1)
        return indian_multiplication(product, a, mod);
    else
        return product;
}

// Thực hiện kiểm tra Fermat với k = 50 lần.
bool fermat_checking(long long n, int k = 50)
{
    // Xủ lý trước một số trường hợp để tăng tính chính xác.
    // Cần tránh trước trường hợp n = 4, do trường hợp này kiểm tra Fermat bị sai.
    if (n < 4)
        return n == 2 || n == 3;
    
    if (n != 2 && n % 2 == 0)
        return false;
        
    for (int i = 1; i <= k; ++i)
    {
        long long a = 2 + rand() % (n - 3);
        if (modular_exponentiation(a, n - 1, n) != 1)
            return false;
    }
    
    return true;
}
#define int long long

using namespace std;

// Sàng lọc số nguyên tố.
vector < int > eratosthenes_sieve(int max_value)
{
    vector < bool > is_prime(max_value + 1, true);
    is_prime[0] = is_prime[1] = false;

    for (int i = 2; i * i <= max_value; ++i)
        if (is_prime[i])
            for (int j = i * i; j <= max_value; j += i)
                is_prime[j] = false;

    vector < int > primes;
    for (int i = 2; i <= max_value; ++i)
        if (is_prime[i])
            primes.push_back(i);

    return primes;
}

void solution(int n)
{
    // Sàng lọc các số nguyên tố từ 1 tới 10^6 (bằng với n^(1/3) trong trường hợp lớn nhất).
    vector < int > primes = eratosthenes_sieve(1000000);

    // Tính F(x) với x bao gồm tất cả các thừa số nguyên tố nhỏ hơn hoặc bằng n^(1/3). Lưu luôn F(x) vào res.
    long long res = 1;
    for (int p: primes)
    {
        if (p * p * p > n)
            break;

        int cnt = 0;
        while (n % p == 0)
        {
            n /= p;
            ++cnt;
        }

        res *= (cnt + 1);
    }

    // Tính F(y) với y bao gồm tất cả các thừa số nguyên tố lớn hơn n^(1/3). Chắc chắn y chỉ có thể ở một trong ba
    // trường hợp: là số nguyên tố, là bình phương một số nguyên tố hoặc là tích của hai số nguyên tố phân biệt.
    if (fermat_checking(n))
        res *= 2LL;
    else
    {
        int squaroot = sqrt(n);
        if (squaroot * squaroot == n && fermat_checking(squaroot))
            res *= 3;
        else if (n != 1)
            res *= 4;
    }

    cout << res;
}

main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    cin >> n;

    solution(n);

    return 0;
}

// dãy con tăng dài nhất 

#include <bits/stdc++.h>

#define int long long

using namespace std;

const int maxn = 1e6 + 10;

void enter(int &n, vector < int > &a)
{
    cin >> n;

    a.resize(n + 1, 0);

    for (int i = 1; i <= n; ++i)
        cin >> a[i];
}

// In kết quả và truy vết dãy con tăng dài nhất.
void print_result(int n, vector < int > &a, vector < int > &dp, vector < int > &trace)
{
    int best = 1;
    for (int i = 2; i <= n; ++i)
        if (dp[i] > dp[best])
            best = i;

    cout << dp[best] << endl;

    vector < int > elements;
    while (best)
    {
        elements.push_back(a[best]);
        best = trace[best];
    }

    for (int i = elements.size() - 1; i >= 0; --i)
        cout << elements[i] << ' ';
}

/**
  * Tìm kiếm nhị phân giá trị p lớn nhất mà a[end_pos[p]] < a[i].
  * max_length: Độ dài dãy con tăng dài nhất đã ghi nhận được
                trong đoạn a[1...i - 1].
  * a: Dãy số ban đầu.
  * val: Tham số đại diện cho a[i].
*/
int binary_searching(int max_length, vector < int > &a, vector < int > &end_pos, int val)
{
    int p = 0;

    int l = 1, r = max_length;
    while (l <= r)
    {
        int mid = (l + r) >> 1;

        if (a[end_pos[mid]] < val)
        {
            p = mid;
            l = mid + 1;
        }
        else
            r = mid - 1;
    }

    return p;
}

void solution(int n, vector < int > &a)
{
    vector < int > dp(n + 1, 0);
    vector < int > end_pos(n + 1, 0);
    vector < int > trace(n + 1, 0);

    int res = 1;
    end_pos[1] = 1;

    for (int i = 1; i <= n; ++i)
    {
        // Tìm kiếm nhị phân độ dài p tốt nhất để ghép a[i] vào phía sau
        // dãy con tăng dài nhất kết thúc tại a[end_pos[p]].
        int p = binary_searching(res, a, end_pos, a[i]);
        int k = p + 1;

        // Cập nhật độ dài dãy con tăng dài nhất hiện tại.
        // Luôn giữ cho phần tử kết thúc của các dãy con tăng là nhỏ nhất có thể.
        if (k > res)
        {
            res = k;
            end_pos[k] = i;
        }
        else if (a[end_pos[k]] > a[i])
            end_pos[k] = i;

        // Cập nhật các kết quả ở vị trí i.
        dp[i] = k;
        trace[i] = end_pos[p];
    }

    print_result(n, a, dp, trace);
}

main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    int n;
    vector < int > a;

    enter(n, a);
    solution(n, a);

    return 0;
}

//dãy con tăng dài nhất (không truy vết)

#include <bits/stdc++.h>

using namespace std;

const int maxn = 1e6 + 10;

void enter(int &n, vector < int > &a)
{
    cin >> n;

    a.resize(n + 1, 0);

    for (int i = 1; i <= n; ++i)
        cin >> a[i];
}

void solution(int n, vector < int > &a)
{
    vector < int > d(n + 1, 0);
	
    int res = 0;
    for (int i = 1; i <= n; ++i)
    {
        int p = lower_bound(d.begin() + 1, d.begin() + res + 1, a[i]) - d.begin();
        res = max(res, p);
        d[p] = a[i];
    }

    cout << res;
}

main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    int n;
    vector < int > a;

    enter(n, a);
    solution(n, a);

    return 0;
}


// sàng nguyên tố 

bool nt[N] ;
void sangnt()
{
    fill(nt,nt + N,true);
    nt[0] = nt[1] = false ;
    for (int i = 2 ; i < N ; i++)
        if(nt[i]) 
            for (int j = i * 2 ; j < N ; j += i)
                nt[j] = false;
}

// sinh ra dãy nhị phân

string transform1 (string n)
{
    int kt = 0;
    for (int i = n.length() - 1 ; i >= 0 ; i--)
    {
        if(n[i] == '1') n[i] = '0';
        else if(n[i] == '0')
        {
            n[i] = '1';
            kt++;
            return n;
        }
    }
    if(kt == 0) n = "1" +n;
    return n;
}

vector<string> vct1;
void qhd()
{
    vct1.push_back("1");
    for (int i = 1 ; i < 1001 ; i++)
    {
        vct1.push_back(transform1(vct1[i - 1]));
    }
}

//Chuỗi đối xứng 
#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
 
#define SZ 2005
#define FOR(i, a, b) for( int i = (a), _b = (b); i <= _b; ++i )
#define max(a, b) ((a) > (b) ? (a) : (b))
char s[SZ];
int f[SZ][SZ], n;
 
void solve() {
	FOR( len, 1, n ) FOR( i, 0, n-len ) {
		int j = i + len - 1;
		if ( len == 1 ) f[i][j] = 1;
		//else if ( len == 2 ) f[i][j] = s[i] == s[j] ? 2 : max(f[i][j], f[j][j]);
		else f[i][j] = s[i] == s[j] ? f[i+1][j-1] + 2 : max(f[i][j-1], f[i+1][j]);
		/*printf( "%d %d %d\n", len, i, j);
		FOR(i, 0, n-1) {
			FOR(j, 0, n-1) printf( "%3d", f[i][j] );
			putchar('\n');
		}*/
	}
}
 
void print() {
	char res[SZ]; memset(res, '\0', sizeof res);
	int i = 0, j = n-1, l = 0;
	while( i <= j ) {
		if ( f[i][j] == f[i+1][j] ) ++i;
		else if ( f[i][j] == f[i][j-1] ) --j;
		else {
			res[l++] = s[i];
			++i; --j;
		}
	}
	printf( "%s", res );
	if( f[0][n-1] % 2 ) res[--l] = 0;
	reverse(res, res+l);
	puts(res);
}
 
int main() {
	scanf( "%s", s ); n = strlen(s);
	solve();
	print();
	return 0;
}


// xâu con đối xứng 

// Step 1: Use for loop, to check at each position in the loop
// Step 2: At each pos in the string, get a possible symetric string
// Step 3: Use find max algorithm, to get the longest symetric string

string sub_palindromic_1(string s, int pos) // aba
{
   int i = 1;
   while ((pos >= i) && (pos + i) < s.length())
   {
      if (s[pos + i] != s[pos - i])
      {
         break;
      }
      i++;
   }

   return s.substr(pos - i + 1, 2 * i - 1);
}

string sub_palindromic_2(string s, int pos) // abba
{
   int j = 0;
   while ((pos + j + 1 < s.length()) && (pos >= j))
   {
      if ((s[pos - j] != s[pos + j + 1]))
      {
         break;
      }
      j++;
   }
   return s.substr(pos - j + 1, 2 * j);
}

string longestPalindrome(string s)
{
   string s_Max = "";
   if (s.length() <= 1)
   {
      s_Max = s;
   }
   else
   {
      for (int i = 0; i < s.length(); i++)
      {
         string s_i;
         if (i == 0)
         {
            if (s[i] == s[i + 1])
            {
               s_i = sub_palindromic_2(s, i);
            }
         }
         else if ((s[i - 1] == s[i + 1]) && (s[i] == s[i + 1]))
         {
            string s1 = sub_palindromic_1(s, i);
            string s2 = sub_palindromic_2(s, i);
            if (s1.length() < s2.length())
            {
               s_i = s1;
            }
            else
            {
               s_i = s2;
            }
         }
         else if (s[i-1] == s[i+1])
         {
            s_i = sub_palindromic_1(s, i);
         }
         else if (s[i] == s[i+1])
         {
            s_i = sub_palindromic_2(s, i);
         }
         else
         {
            s_i.push_back(s[i]);
         }
         if (s_i.length() > s_Max.length())
         {
            s_Max = s_i;
         }
      }
   }
   return s_Max;
}
// số thứ i khi xếp các số tự nhiên với nhau
#include <bits/stdc++.h>
using namespace std;
int main(){
    long long p, x, i;
    cin >> p;
    for(i = 1; i <= 14; ++i){
        x = 9 * i * pow(10, i - 1);
        if(p - x >= 0){
            p -= x;
        }
        else{
            break;
        }
    }
    x = (long long)pow(10, i - 1) + p/i - 1;
    p %= i;
    if(p == 0){
        cout << x % 10;
    }
    else{
        x++;
        string s = to_string(x);
        cout << s[p - 1];
    }
    return 0;
}
